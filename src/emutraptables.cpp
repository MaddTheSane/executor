/* Copyright 1994, 1995, 1996 by Abacus Research and
 * Development, Inc.  All rights reserved.
 */

#include "rsys/common.h"
#include "rsys/everything.h"

#include "OSUtil.h"
#include "Gestalt.h"
#include "SysErr.h"

#include "rsys/trapglue.h"
#include "rsys/stdfile.h"
#include "rsys/tesave.h"
#include "rsys/resource.h"
#include "rsys/ctl.h"
#include "rsys/list.h"
#include "rsys/menu.h"
#include "rsys/wind.h"
#include "rsys/print.h"
#include "rsys/osutil.h"
#include "rsys/vbl.h"
#include "rsys/soundopts.h"
#include "rsys/refresh.h"
#include "rsys/gestalt.h"
#include "rsys/emustubs.h"
#include "rsys/executor.h"

using namespace Executor;

syn68k_addr_t Executor::tooltraptable[0x400]; /* Gets filled in at run time */
syn68k_addr_t Executor::ostraptable[0x100]; /* Gets filled in at run time */

#define C_Pack9 _Unimplemented /* PPCBrowser */
#define C_Pack10 _Unimplemented

#define C_Pack13 _Unimplemented /* DB stuff */
#define C_Pack1 _Unimplemented

#define _AddDrive _Unimplemented
#define _RDrvrInstall _Unimplemented
/* #define (void*)_IMVI_ReadXPRam (void*)_Unimplemented */
#define _IMVI_WriteXPRam _Unimplemented
#define _IMVI_MemoryDispatch _Unimplemented
/* #define (void*)_SlotManager (void*)_Unimplemented */
/* #define (void*)_SlotVInstall (void*)_Unimplemented */
/* #define (void*)_SlotVRemove (void*)_Unimplemented */
#define _AttachVBL _Unimplemented
#define _DoVBLTask _Unimplemented
#define _DTInstall _Unimplemented
#define _SIntRemove _Unimplemented
#define _InternalWait _Unimplemented
#define _SIntInstall _Unimplemented
#define _IMVI_IdleUpdate _Unimplemented
#define _IMVI_SlpQInstall _Unimplemented
#define _IMVI_DebugUtil _Unimplemented
#define _IMVI_DeferUserFn _Unimplemented
#define _IMVI_Translate24To32 _Unimplemented

#define _GetMaskTable _Unimplemented
#define _Debugger _Unimplemented

void C_unknown574(void)
{
}

static const toolstuff_t unimplemented_toolstuff = { { (void *)&_Unimplemented, static_cast<ULONGINT>(-1) }, 0 };

toolstuff_t Executor::toolstuff[0x400] = {
    { { (void *)&_SoundDispatch, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_SndDisposeChannel, ptoc(&C_SndDisposeChannel) }, 0 },
    { { (void *)&C_SndAddModifier, ptoc(&C_SndAddModifier) }, 0 },
    { { (void *)&C_SndDoCommand, ptoc(&C_SndDoCommand) }, 0 },
    { { (void *)&C_SndDoImmediate, ptoc(&C_SndDoImmediate) }, 0 },
    { { (void *)&C_SndPlay, ptoc(&C_SndPlay) }, 0 },
    { { (void *)&C_SndControl, ptoc(&C_SndControl) }, 0 },
    { { (void *)&C_SndNewChannel, ptoc(&C_SndNewChannel) }, 0 },
    { { (void *)&C_InitProcMenu, ptoc(&C_InitProcMenu) }, 0 },
    { { (void *)&C_GetCVariant, ptoc(&C_GetCVariant) }, 0 },
    { { (void *)&C_GetWVariant, ptoc(&C_GetWVariant) }, 0 },
    { { (void *)&C_PopUpMenuSelect, ptoc(&C_PopUpMenuSelect) }, 0 },
    { { (void *)&C_RGetResource, ptoc(&C_RGetResource) }, 0 },
    { { (void *)&C_Count1Resources, ptoc(&C_Count1Resources) }, 0 },
    { { (void *)&C_Get1IndResource, ptoc(&C_Get1IndResource) }, 0 },
    { { (void *)&C_Get1IndType, ptoc(&C_Get1IndType) }, 0 },
    { { (void *)&C_Unique1ID, ptoc(&C_Unique1ID) }, 0 },
    { { (void *)&C_TESelView, ptoc(&C_TESelView) }, 0 },
    { { (void *)&C_TEPinScroll, ptoc(&C_TEPinScroll) }, 0 },
    { { (void *)&C_TEAutoView, ptoc(&C_TEAutoView) }, 0 },
    { { (void *)&C_SetFractEnable, ptoc(&C_SetFractEnable) }, 0 },
    { { (void *)&_SCSIDispatch, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_Pack8, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_CopyMask, ptoc(&C_CopyMask) }, 0 },
    { { (void *)&C_FixAtan2, ptoc(&C_FixAtan2) }, 0 },
    { { (void *)&_Unimplemented, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_HOpenResFile, ptoc(&C_HOpenResFile) }, 0 },
    { { (void *)&C_HCreateResFile, ptoc(&C_HCreateResFile) }, 0 },
    { { (void *)&C_Count1Types, ptoc(&C_Count1Types) }, 0 },
    { { (void *)&C_InvalMenuBar, ptoc(&C_InvalMenuBar) }, 0 },
    unimplemented_toolstuff,
    { { (void *)&C_Get1Resource, ptoc(&C_Get1Resource) }, 0 },
    { { (void *)&C_Get1NamedResource, ptoc(&C_Get1NamedResource) }, 0 },
    { { (void *)&C_MaxSizeRsrc, ptoc(&C_MaxSizeRsrc) }, 0 },
    { { (void *)&_ResourceDispatch, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_AliasDispatch, static_cast<ULONGINT>(-1) }, 0 },
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    { { (void *)&C_InsMenuItem, ptoc(&C_InsMenuItem) }, 0 },
    { { (void *)&C_HideDItem, ptoc(&C_HideDItem) }, 0 },
    { { (void *)&C_ShowDItem, ptoc(&C_ShowDItem) }, 0 },
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    { { (void *)&C_Pack9, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_Pack10, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_Pack11, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_Pack12, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_Pack13, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_Pack14, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_Pack15, static_cast<ULONGINT>(-1) }, 0 },
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    { { (void *)&C_SetFScaleDisable, ptoc(&C_SetFScaleDisable) }, 0 },
    { { (void *)&C_FontMetrics, ptoc(&C_FontMetrics) }, 0 },
    { { (void *)&_GetMaskTable, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_MeasureText, ptoc(&C_MeasureText) }, 0 },
    { { (void *)&C_CalcMask, ptoc(&C_CalcMask) }, 0 },
    { { (void *)&C_SeedFill, ptoc(&C_SeedFill) }, 0 },
    { { (void *)&C_ZoomWindow, ptoc(&C_ZoomWindow) }, 0 },
    { { (void *)&C_TrackBox, ptoc(&C_TrackBox) }, 0 },
    { { (void *)&C_TEGetOffset, ptoc(&C_TEGetOffset) }, 0 },
    { { (void *)&_TEDispatch, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_TEStylNew, ptoc(&C_TEStylNew) }, 0 },
    { { (void *)&C_Long2Fix, ptoc(&C_Long2Fix) }, 0 },
    { { (void *)&C_Fix2Long, ptoc(&C_Fix2Long) }, 0 },
    { { (void *)&C_Fix2Frac, ptoc(&C_Fix2Frac) }, 0 },
    { { (void *)&C_Frac2Fix, ptoc(&C_Frac2Fix) }, 0 },
    { { (void *)&_Fix2X, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_R_X2Fix, ptoc(&C_R_X2Fix) }, 0 },
    { { (void *)&_Frac2X, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_R_X2Frac, ptoc(&C_R_X2Frac) }, 0 },
    { { (void *)&C_FracCos, ptoc(&C_FracCos) }, 0 },
    { { (void *)&C_FracSin, ptoc(&C_FracSin) }, 0 },
    { { (void *)&C_FracSqrt, ptoc(&C_FracSqrt) }, 0 },
    { { (void *)&C_FracMul, ptoc(&C_FracMul) }, 0 },
    { { (void *)&C_FracDiv, ptoc(&C_FracDiv) }, 0 },
    unimplemented_toolstuff,
    { { (void *)&C_FixDiv, ptoc(&C_FixDiv) }, 0 },
    { { (void *)&C_GetItemCmd, ptoc(&C_GetItemCmd) }, 0 },
    { { (void *)&C_SetItemCmd, ptoc(&C_SetItemCmd) }, 0 },
    { { (void *)&C_InitCursor, ptoc(&C_InitCursor) }, 0 },
    { { (void *)&C_SetCursor, ptoc(&C_SetCursor) }, 0 },
    { { (void *)&C_HideCursor, ptoc(&C_HideCursor) }, 0 },
    { { (void *)&C_ShowCursor, ptoc(&C_ShowCursor) }, 0 },
    { { (void *)&_FontDispatch, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_ShieldCursor, ptoc(&C_ShieldCursor) }, 0 },
    { { (void *)&C_ObscureCursor, ptoc(&C_ObscureCursor) }, 0 },
    unimplemented_toolstuff,
    { { (void *)&C_BitAnd, ptoc(&C_BitAnd) }, 0 },
    { { (void *)&C_BitXor, ptoc(&C_BitXor) }, 0 },
    { { (void *)&C_BitNot, ptoc(&C_BitNot) }, 0 },
    { { (void *)&C_BitOr, ptoc(&C_BitOr) }, 0 },
    { { (void *)&C_BitShift, ptoc(&C_BitShift) }, 0 },
    { { (void *)&C_BitTst, ptoc(&C_BitTst) }, 0 },
    { { (void *)&C_BitSet, ptoc(&C_BitSet) }, 0 },
    { { (void *)&C_BitClr, ptoc(&C_BitClr) }, 0 },
    { { (void *)&C_WaitNextEvent, ptoc(&C_WaitNextEvent) }, 0 },
    { { (void *)&C_Random, ptoc(&C_Random) }, 0 },
    { { (void *)&C_ForeColor, ptoc(&C_ForeColor) }, 0 },
    { { (void *)&C_BackColor, ptoc(&C_BackColor) }, 0 },
    { { (void *)&C_ColorBit, ptoc(&C_ColorBit) }, 0 },
    { { (void *)&C_GetPixel, ptoc(&C_GetPixel) }, 0 },
    { { (void *)&C_StuffHex, ptoc(&C_StuffHex) }, 0 },
    { { (void *)&C_LongMul, ptoc(&C_LongMul) }, 0 },
    { { (void *)&C_FixMul, ptoc(&C_FixMul) }, 0 },
    { { (void *)&C_FixRatio, ptoc(&C_FixRatio) }, 0 },
    { { (void *)&C_HiWord, ptoc(&C_HiWord) }, 0 },
    { { (void *)&C_LoWord, ptoc(&C_LoWord) }, 0 },
    { { (void *)&C_FixRound, ptoc(&C_FixRound) }, 0 },
    { { (void *)&C_InitPort, ptoc(&C_InitPort) }, 0 },
    { { (void *)&C_InitGraf, ptoc(&C_InitGraf) }, 0 },
    { { (void *)&C_OpenPort, ptoc(&C_OpenPort) }, 0 },
    { { (void *)&C_LocalToGlobal, ptoc(&C_LocalToGlobal) }, 0 },
    { { (void *)&C_GlobalToLocal, ptoc(&C_GlobalToLocal) }, 0 },
    { { (void *)&C_GrafDevice, ptoc(&C_GrafDevice) }, 0 },
    { { (void *)&C_SetPort, ptoc(&C_SetPort) }, 0 },
    { { (void *)&C_GetPort, ptoc(&C_GetPort) }, 0 },
    { { (void *)&C_SetPortBits, ptoc(&C_SetPortBits) }, 0 },
    { { (void *)&C_PortSize, ptoc(&C_PortSize) }, 0 },
    { { (void *)&C_MovePortTo, ptoc(&C_MovePortTo) }, 0 },
    { { (void *)&C_SetOrigin, ptoc(&C_SetOrigin) }, 0 },
    { { (void *)&C_SetClip, ptoc(&C_SetClip) }, 0 },
    { { (void *)&C_GetClip, ptoc(&C_GetClip) }, 0 },
    { { (void *)&C_ClipRect, ptoc(&C_ClipRect) }, 0 },
    { { (void *)&C_BackPat, ptoc(&C_BackPat) }, 0 },
    { { (void *)&C_ClosePort, ptoc(&C_ClosePort) }, 0 },
    { { (void *)&C_AddPt, ptoc(&C_AddPt) }, 0 },
    { { (void *)&C_SubPt, ptoc(&C_SubPt) }, 0 },
    { { (void *)&C_SetPt, ptoc(&C_SetPt) }, 0 },
    { { (void *)&C_EqualPt, ptoc(&C_EqualPt) }, 0 },
    { { (void *)&C_StdText, ptoc(&C_StdText) }, 0 },
    { { (void *)&C_DrawChar, ptoc(&C_DrawChar) }, 0 },
    { { (void *)&C_DrawString, ptoc(&C_DrawString) }, 0 },
    { { (void *)&C_DrawText, ptoc(&C_DrawText) }, 0 },
    { { (void *)&C_TextWidth, ptoc(&C_TextWidth) }, 0 },
    { { (void *)&C_TextFont, ptoc(&C_TextFont) }, 0 },
    { { (void *)&C_TextFace, ptoc(&C_TextFace) }, 0 },
    { { (void *)&C_TextMode, ptoc(&C_TextMode) }, 0 },
    { { (void *)&C_TextSize, ptoc(&C_TextSize) }, 0 },
    { { (void *)&C_GetFontInfo, ptoc(&C_GetFontInfo) }, 0 },
    { { (void *)&C_StringWidth, ptoc(&C_StringWidth) }, 0 },
    { { (void *)&C_CharWidth, ptoc(&C_CharWidth) }, 0 },
    { { (void *)&C_SpaceExtra, ptoc(&C_SpaceExtra) }, 0 },
    { { (void *)&_OSDispatch, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_StdLine, ptoc(&C_StdLine) }, 0 },
    { { (void *)&C_LineTo, ptoc(&C_LineTo) }, 0 },
    { { (void *)&C_Line, ptoc(&C_Line) }, 0 },
    { { (void *)&C_MoveTo, ptoc(&C_MoveTo) }, 0 },
    { { (void *)&C_Move, ptoc(&C_Move) }, 0 },
    { { (void *)&_ShutDown, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_HidePen, ptoc(&C_HidePen) }, 0 },
    { { (void *)&C_ShowPen, ptoc(&C_ShowPen) }, 0 },
    { { (void *)&C_GetPenState, ptoc(&C_GetPenState) }, 0 },
    { { (void *)&C_SetPenState, ptoc(&C_SetPenState) }, 0 },
    { { (void *)&C_GetPen, ptoc(&C_GetPen) }, 0 },
    { { (void *)&C_PenSize, ptoc(&C_PenSize) }, 0 },
    { { (void *)&C_PenMode, ptoc(&C_PenMode) }, 0 },
    { { (void *)&C_PenPat, ptoc(&C_PenPat) }, 0 },
    { { (void *)&C_PenNormal, ptoc(&C_PenNormal) }, 0 },
    unimplemented_toolstuff,
    { { (void *)&C_StdRect, ptoc(&C_StdRect) }, 0 },
    { { (void *)&C_FrameRect, ptoc(&C_FrameRect) }, 0 },
    { { (void *)&C_PaintRect, ptoc(&C_PaintRect) }, 0 },
    { { (void *)&C_EraseRect, ptoc(&C_EraseRect) }, 0 },
    { { (void *)&C_InvertRect, ptoc(&C_InvertRect) }, 0 },
    { { (void *)&C_FillRect, ptoc(&C_FillRect) }, 0 },
    { { (void *)&C_EqualRect, ptoc(&C_EqualRect) }, 0 },
    { { (void *)&C_SetRect, ptoc(&C_SetRect) }, 0 },
    { { (void *)&C_OffsetRect, ptoc(&C_OffsetRect) }, 0 },
    { { (void *)&C_InsetRect, ptoc(&C_InsetRect) }, 0 },
    { { (void *)&C_SectRect, ptoc(&C_SectRect) }, 0 },
    { { (void *)&C_UnionRect, ptoc(&C_UnionRect) }, 0 },
    { { (void *)&C_Pt2Rect, ptoc(&C_Pt2Rect) }, 0 },
    { { (void *)&C_PtInRect, ptoc(&C_PtInRect) }, 0 },
    { { (void *)&C_EmptyRect, ptoc(&C_EmptyRect) }, 0 },
    { { (void *)&C_StdRRect, ptoc(&C_StdRRect) }, 0 },
    { { (void *)&C_FrameRoundRect, ptoc(&C_FrameRoundRect) }, 0 },
    { { (void *)&C_PaintRoundRect, ptoc(&C_PaintRoundRect) }, 0 },
    { { (void *)&C_EraseRoundRect, ptoc(&C_EraseRoundRect) }, 0 },
    { { (void *)&C_InvertRoundRect, ptoc(&C_InvertRoundRect) }, 0 },
    { { (void *)&C_FillRoundRect, ptoc(&C_FillRoundRect) }, 0 },
    { { (void *)&_ScriptUtil, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_StdOval, ptoc(&C_StdOval) }, 0 },
    { { (void *)&C_FrameOval, ptoc(&C_FrameOval) }, 0 },
    { { (void *)&C_PaintOval, ptoc(&C_PaintOval) }, 0 },
    { { (void *)&C_EraseOval, ptoc(&C_EraseOval) }, 0 },
    { { (void *)&C_InvertOval, ptoc(&C_InvertOval) }, 0 },
    { { (void *)&C_FillOval, ptoc(&C_FillOval) }, 0 },
    { { (void *)&C_SlopeFromAngle, ptoc(&C_SlopeFromAngle) }, 0 },
    { { (void *)&C_StdArc, ptoc(&C_StdArc) }, 0 },
    { { (void *)&C_FrameArc, ptoc(&C_FrameArc) }, 0 },
    { { (void *)&C_PaintArc, ptoc(&C_PaintArc) }, 0 },
    { { (void *)&C_EraseArc, ptoc(&C_EraseArc) }, 0 },
    { { (void *)&C_InvertArc, ptoc(&C_InvertArc) }, 0 },
    { { (void *)&C_FillArc, ptoc(&C_FillArc) }, 0 },
    { { (void *)&C_PtToAngle, ptoc(&C_PtToAngle) }, 0 },
    { { (void *)&C_AngleFromSlope, ptoc(&C_AngleFromSlope) }, 0 },
    { { (void *)&C_StdPoly, ptoc(&C_StdPoly) }, 0 },
    { { (void *)&C_FramePoly, ptoc(&C_FramePoly) }, 0 },
    { { (void *)&C_PaintPoly, ptoc(&C_PaintPoly) }, 0 },
    { { (void *)&C_ErasePoly, ptoc(&C_ErasePoly) }, 0 },
    { { (void *)&C_InvertPoly, ptoc(&C_InvertPoly) }, 0 },
    { { (void *)&C_FillPoly, ptoc(&C_FillPoly) }, 0 },
    { { (void *)&C_OpenPoly, ptoc(&C_OpenPoly) }, 0 },
    { { (void *)&C_ClosePoly, ptoc(&C_ClosePoly) }, 0 },
    { { (void *)&C_KillPoly, ptoc(&C_KillPoly) }, 0 },
    { { (void *)&C_OffsetPoly, ptoc(&C_OffsetPoly) }, 0 },
    { { (void *)&C_PackBits, ptoc(&C_PackBits) }, 0 },
    { { (void *)&C_UnpackBits, ptoc(&C_UnpackBits) }, 0 },
    { { (void *)&C_StdRgn, ptoc(&C_StdRgn) }, 0 },
    { { (void *)&C_FrameRgn, ptoc(&C_FrameRgn) }, 0 },
    { { (void *)&C_PaintRgn, ptoc(&C_PaintRgn) }, 0 },
    { { (void *)&C_EraseRgn, ptoc(&C_EraseRgn) }, 0 },
    { { (void *)&C_InvertRgn, ptoc(&C_InvertRgn) }, 0 },
    { { (void *)&C_FillRgn, ptoc(&C_FillRgn) }, 0 },
    { { (void *)&C_BitMapToRegion, ptoc(&C_BitMapToRegion) }, 0 },
    { { (void *)&C_NewRgn, ptoc(&C_NewRgn) }, 0 },
    { { (void *)&C_DisposeRgn, ptoc(&C_DisposeRgn) }, 0 },
    { { (void *)&C_OpenRgn, ptoc(&C_OpenRgn) }, 0 },
    { { (void *)&C_CloseRgn, ptoc(&C_CloseRgn) }, 0 },
    { { (void *)&C_CopyRgn, ptoc(&C_CopyRgn) }, 0 },
    { { (void *)&C_SetEmptyRgn, ptoc(&C_SetEmptyRgn) }, 0 },
    { { (void *)&C_SetRectRgn, ptoc(&C_SetRectRgn) }, 0 },
    { { (void *)&C_RectRgn, ptoc(&C_RectRgn) }, 0 },
    { { (void *)&C_OffsetRgn, ptoc(&C_OffsetRgn) }, 0 },
    { { (void *)&C_InsetRgn, ptoc(&C_InsetRgn) }, 0 },
    { { (void *)&C_EmptyRgn, ptoc(&C_EmptyRgn) }, 0 },
    { { (void *)&C_EqualRgn, ptoc(&C_EqualRgn) }, 0 },
    { { (void *)&C_SectRgn, ptoc(&C_SectRgn) }, 0 },
    { { (void *)&C_UnionRgn, ptoc(&C_UnionRgn) }, 0 },
    { { (void *)&C_DiffRgn, ptoc(&C_DiffRgn) }, 0 },
    { { (void *)&C_XorRgn, ptoc(&C_XorRgn) }, 0 },
    { { (void *)&C_PtInRgn, ptoc(&C_PtInRgn) }, 0 },
    { { (void *)&C_RectInRgn, ptoc(&C_RectInRgn) }, 0 },
    { { (void *)&C_SetStdProcs, ptoc(&C_SetStdProcs) }, 0 },
    { { (void *)&C_StdBits, ptoc(&C_StdBits) }, 0 },
    { { (void *)&C_CopyBits, ptoc(&C_CopyBits) }, 0 },
    { { (void *)&C_StdTxMeas, ptoc(&C_StdTxMeas) }, 0 },
    { { (void *)&C_StdGetPic, ptoc(&C_StdGetPic) }, 0 },
    { { (void *)&C_ScrollRect, ptoc(&C_ScrollRect) }, 0 },
    { { (void *)&C_StdPutPic, ptoc(&C_StdPutPic) }, 0 },
    { { (void *)&C_StdComment, ptoc(&C_StdComment) }, 0 },
    { { (void *)&C_PicComment, ptoc(&C_PicComment) }, 0 },
    { { (void *)&C_OpenPicture, ptoc(&C_OpenPicture) }, 0 },
    { { (void *)&C_ClosePicture, ptoc(&C_ClosePicture) }, 0 },
    { { (void *)&C_KillPicture, ptoc(&C_KillPicture) }, 0 },
    { { (void *)&C_DrawPicture, ptoc(&C_DrawPicture) }, 0 },
    unimplemented_toolstuff,
    { { (void *)&C_ScalePt, ptoc(&C_ScalePt) }, 0 },
    { { (void *)&C_MapPt, ptoc(&C_MapPt) }, 0 },
    { { (void *)&C_MapRect, ptoc(&C_MapRect) }, 0 },
    { { (void *)&C_MapRgn, ptoc(&C_MapRgn) }, 0 },
    { { (void *)&C_MapPoly, ptoc(&C_MapPoly) }, 0 },
    { { (void *)&_PrGlue, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_InitFonts, ptoc(&C_InitFonts) }, 0 },
    { { (void *)&C_GetFontName, ptoc(&C_GetFontName) }, 0 },
    { { (void *)&C_GetFNum, ptoc(&C_GetFNum) }, 0 },
    { { (void *)&C_FMSwapFont, ptoc(&C_FMSwapFont) }, 0 },
    { { (void *)&C_RealFont, ptoc(&C_RealFont) }, 0 },
    { { (void *)&C_SetFontLock, ptoc(&C_SetFontLock) }, 0 },
    { { (void *)&C_DrawGrowIcon, ptoc(&C_DrawGrowIcon) }, 0 },
    { { (void *)&C_DragGrayRgn, ptoc(&C_DragGrayRgn) }, 0 },
    { { (void *)&C_NewString, ptoc(&C_NewString) }, 0 },
    { { (void *)&C_SetString, ptoc(&C_SetString) }, 0 },
    { { (void *)&C_ShowHide, ptoc(&C_ShowHide) }, 0 },
    { { (void *)&C_CalcVis, ptoc(&C_CalcVis) }, 0 },
    { { (void *)&C_CalcVisBehind, ptoc(&C_CalcVisBehind) }, 0 },
    { { (void *)&C_ClipAbove, ptoc(&C_ClipAbove) }, 0 },
    { { (void *)&C_PaintOne, ptoc(&C_PaintOne) }, 0 },
    { { (void *)&C_PaintBehind, ptoc(&C_PaintBehind) }, 0 },
    { { (void *)&C_SaveOld, ptoc(&C_SaveOld) }, 0 },
    { { (void *)&C_DrawNew, ptoc(&C_DrawNew) }, 0 },
    { { (void *)&C_GetWMgrPort, ptoc(&C_GetWMgrPort) }, 0 },
    { { (void *)&C_CheckUpdate, ptoc(&C_CheckUpdate) }, 0 },
    { { (void *)&C_InitWindows, ptoc(&C_InitWindows) }, 0 },
    { { (void *)&C_NewWindow, ptoc(&C_NewWindow) }, 0 },
    { { (void *)&C_DisposeWindow, ptoc(&C_DisposeWindow) }, 0 },
    { { (void *)&C_ShowWindow, ptoc(&C_ShowWindow) }, 0 },
    { { (void *)&C_HideWindow, ptoc(&C_HideWindow) }, 0 },
    { { (void *)&C_GetWRefCon, ptoc(&C_GetWRefCon) }, 0 },
    { { (void *)&C_SetWRefCon, ptoc(&C_SetWRefCon) }, 0 },
    { { (void *)&C_GetWTitle, ptoc(&C_GetWTitle) }, 0 },
    { { (void *)&C_SetWTitle, ptoc(&C_SetWTitle) }, 0 },
    { { (void *)&C_MoveWindow, ptoc(&C_MoveWindow) }, 0 },
    { { (void *)&C_HiliteWindow, ptoc(&C_HiliteWindow) }, 0 },
    { { (void *)&C_SizeWindow, ptoc(&C_SizeWindow) }, 0 },
    { { (void *)&C_TrackGoAway, ptoc(&C_TrackGoAway) }, 0 },
    { { (void *)&C_SelectWindow, ptoc(&C_SelectWindow) }, 0 },
    { { (void *)&C_BringToFront, ptoc(&C_BringToFront) }, 0 },
    { { (void *)&C_SendBehind, ptoc(&C_SendBehind) }, 0 },
    { { (void *)&C_BeginUpdate, ptoc(&C_BeginUpdate) }, 0 },
    { { (void *)&C_EndUpdate, ptoc(&C_EndUpdate) }, 0 },
    { { (void *)&C_FrontWindow, ptoc(&C_FrontWindow) }, 0 },
    { { (void *)&C_DragWindow, ptoc(&C_DragWindow) }, 0 },
    { { (void *)&C_DragTheRgn, ptoc(&C_DragTheRgn) }, 0 },
    { { (void *)&C_InvalRgn, ptoc(&C_InvalRgn) }, 0 },
    { { (void *)&C_InvalRect, ptoc(&C_InvalRect) }, 0 },
    { { (void *)&C_ValidRgn, ptoc(&C_ValidRgn) }, 0 },
    { { (void *)&C_ValidRect, ptoc(&C_ValidRect) }, 0 },
    { { (void *)&C_GrowWindow, ptoc(&C_GrowWindow) }, 0 },
    { { (void *)&C_FindWindow, ptoc(&C_FindWindow) }, 0 },
    { { (void *)&C_CloseWindow, ptoc(&C_CloseWindow) }, 0 },
    { { (void *)&C_SetWindowPic, ptoc(&C_SetWindowPic) }, 0 },
    { { (void *)&C_GetWindowPic, ptoc(&C_GetWindowPic) }, 0 },
    { { (void *)&C_InitMenus, ptoc(&C_InitMenus) }, 0 },
    { { (void *)&C_NewMenu, ptoc(&C_NewMenu) }, 0 },
    { { (void *)&C_DisposeMenu, ptoc(&C_DisposeMenu) }, 0 },
    { { (void *)&C_AppendMenu, ptoc(&C_AppendMenu) }, 0 },
    { { (void *)&C_ClearMenuBar, ptoc(&C_ClearMenuBar) }, 0 },
    { { (void *)&C_InsertMenu, ptoc(&C_InsertMenu) }, 0 },
    { { (void *)&C_DeleteMenu, ptoc(&C_DeleteMenu) }, 0 },
    { { (void *)&C_DrawMenuBar, ptoc(&C_DrawMenuBar) }, 0 },
    { { (void *)&C_HiliteMenu, ptoc(&C_HiliteMenu) }, 0 },
    { { (void *)&C_EnableItem, ptoc(&C_EnableItem) }, 0 },
    { { (void *)&C_DisableItem, ptoc(&C_DisableItem) }, 0 },
    { { (void *)&C_GetMenuBar, ptoc(&C_GetMenuBar) }, 0 },
    { { (void *)&C_SetMenuBar, ptoc(&C_SetMenuBar) }, 0 },
    { { (void *)&C_MenuSelect, ptoc(&C_MenuSelect) }, 0 },
    { { (void *)&C_MenuKey, ptoc(&C_MenuKey) }, 0 },
    { { (void *)&C_GetItemIcon, ptoc(&C_GetItemIcon) }, 0 },
    { { (void *)&C_SetItemIcon, ptoc(&C_SetItemIcon) }, 0 },
    { { (void *)&C_GetItemStyle, ptoc(&C_GetItemStyle) }, 0 },
    { { (void *)&C_SetItemStyle, ptoc(&C_SetItemStyle) }, 0 },
    { { (void *)&C_GetItemMark, ptoc(&C_GetItemMark) }, 0 },
    { { (void *)&C_SetItemMark, ptoc(&C_SetItemMark) }, 0 },
    { { (void *)&C_CheckItem, ptoc(&C_CheckItem) }, 0 },
    { { (void *)&C_GetItem, ptoc(&C_GetItem) }, 0 },
    { { (void *)&C_SetItem, ptoc(&C_SetItem) }, 0 },
    { { (void *)&C_CalcMenuSize, ptoc(&C_CalcMenuSize) }, 0 },
    { { (void *)&C_GetMHandle, ptoc(&C_GetMHandle) }, 0 },
    { { (void *)&C_SetMenuFlash, ptoc(&C_SetMenuFlash) }, 0 },
    { { (void *)&C_PlotIcon, ptoc(&C_PlotIcon) }, 0 },
    { { (void *)&C_FlashMenuBar, ptoc(&C_FlashMenuBar) }, 0 },
    { { (void *)&C_AddResMenu, ptoc(&C_AddResMenu) }, 0 },
    { { (void *)&C_PinRect, ptoc(&C_PinRect) }, 0 },
    { { (void *)&C_DeltaPoint, ptoc(&C_DeltaPoint) }, 0 },
    { { (void *)&C_CountMItems, ptoc(&C_CountMItems) }, 0 },
    { { (void *)&C_InsertResMenu, ptoc(&C_InsertResMenu) }, 0 },
    { { (void *)&C_DelMenuItem, ptoc(&C_DelMenuItem) }, 0 },
    { { (void *)&C_UpdtControl, ptoc(&C_UpdtControl) }, 0 },
    { { (void *)&C_NewControl, ptoc(&C_NewControl) }, 0 },
    { { (void *)&C_DisposeControl, ptoc(&C_DisposeControl) }, 0 },
    { { (void *)&C_KillControls, ptoc(&C_KillControls) }, 0 },
    { { (void *)&C_ShowControl, ptoc(&C_ShowControl) }, 0 },
    { { (void *)&C_HideControl, ptoc(&C_HideControl) }, 0 },
    { { (void *)&C_MoveControl, ptoc(&C_MoveControl) }, 0 },
    { { (void *)&C_GetCRefCon, ptoc(&C_GetCRefCon) }, 0 },
    { { (void *)&C_SetCRefCon, ptoc(&C_SetCRefCon) }, 0 },
    { { (void *)&C_SizeControl, ptoc(&C_SizeControl) }, 0 },
    { { (void *)&C_HiliteControl, ptoc(&C_HiliteControl) }, 0 },
    { { (void *)&C_GetCTitle, ptoc(&C_GetCTitle) }, 0 },
    { { (void *)&C_SetCTitle, ptoc(&C_SetCTitle) }, 0 },
    { { (void *)&C_GetCtlValue, ptoc(&C_GetCtlValue) }, 0 },
    { { (void *)&C_GetCtlMin, ptoc(&C_GetCtlMin) }, 0 },
    { { (void *)&C_GetCtlMax, ptoc(&C_GetCtlMax) }, 0 },
    { { (void *)&C_SetCtlValue, ptoc(&C_SetCtlValue) }, 0 },
    { { (void *)&C_SetCtlMin, ptoc(&C_SetCtlMin) }, 0 },
    { { (void *)&C_SetCtlMax, ptoc(&C_SetCtlMax) }, 0 },
    { { (void *)&C_TestControl, ptoc(&C_TestControl) }, 0 },
    { { (void *)&C_DragControl, ptoc(&C_DragControl) }, 0 },
    { { (void *)&C_TrackControl, ptoc(&C_TrackControl) }, 0 },
    { { (void *)&C_DrawControls, ptoc(&C_DrawControls) }, 0 },
    { { (void *)&C_GetCtlAction, ptoc(&C_GetCtlAction) }, 0 },
    { { (void *)&C_SetCtlAction, ptoc(&C_SetCtlAction) }, 0 },
    { { (void *)&C_FindControl, ptoc(&C_FindControl) }, 0 },
    { { (void *)&C_Draw1Control, ptoc(&C_Draw1Control) }, 0 },
    { { (void *)&_Dequeue, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_Enqueue, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_GetNextEvent, ptoc(&C_GetNextEvent) }, 0 },
    { { (void *)&C_EventAvail, ptoc(&C_EventAvail) }, 0 },
    { { (void *)&C_GetMouse, ptoc(&C_GetMouse) }, 0 },
    { { (void *)&C_StillDown, ptoc(&C_StillDown) }, 0 },
    { { (void *)&C_Button, ptoc(&C_Button) }, 0 },
    { { (void *)&C_TickCount, ptoc(&C_TickCount) }, 0 },
    { { (void *)&C_GetKeys, ptoc(&C_GetKeys) }, 0 },
    { { (void *)&C_WaitMouseUp, ptoc(&C_WaitMouseUp) }, 0 },
    { { (void *)&C_UpdtDialog, ptoc(&C_UpdtDialog) }, 0 },
    { { (void *)&C_CouldDialog, ptoc(&C_CouldDialog) }, 0 },
    { { (void *)&C_FreeDialog, ptoc(&C_FreeDialog) }, 0 },
    { { (void *)&C_InitDialogs, ptoc(&C_InitDialogs) }, 0 },
    { { (void *)&C_GetNewDialog, ptoc(&C_GetNewDialog) }, 0 },
    { { (void *)&C_NewDialog, ptoc(&C_NewDialog) }, 0 },
    { { (void *)&C_SelIText, ptoc(&C_SelIText) }, 0 },
    { { (void *)&C_IsDialogEvent, ptoc(&C_IsDialogEvent) }, 0 },
    { { (void *)&C_DialogSelect, ptoc(&C_DialogSelect) }, 0 },
    { { (void *)&C_DrawDialog, ptoc(&C_DrawDialog) }, 0 },
    { { (void *)&C_CloseDialog, ptoc(&C_CloseDialog) }, 0 },
    { { (void *)&C_DisposDialog, ptoc(&C_DisposDialog) }, 0 },
    { { (void *)&C_FindDItem, ptoc(&C_FindDItem) }, 0 },
    { { (void *)&C_Alert, ptoc(&C_Alert) }, 0 },
    { { (void *)&C_StopAlert, ptoc(&C_StopAlert) }, 0 },
    { { (void *)&C_NoteAlert, ptoc(&C_NoteAlert) }, 0 },
    { { (void *)&C_CautionAlert, ptoc(&C_CautionAlert) }, 0 },
    { { (void *)&C_CouldAlert, ptoc(&C_CouldAlert) }, 0 },
    { { (void *)&C_FreeAlert, ptoc(&C_FreeAlert) }, 0 },
    { { (void *)&C_ParamText, ptoc(&C_ParamText) }, 0 },
    { { (void *)&C_ErrorSound, ptoc(&C_ErrorSound) }, 0 },
    { { (void *)&C_GetDItem, ptoc(&C_GetDItem) }, 0 },
    { { (void *)&C_SetDItem, ptoc(&C_SetDItem) }, 0 },
    { { (void *)&C_SetIText, ptoc(&C_SetIText) }, 0 },
    { { (void *)&C_GetIText, ptoc(&C_GetIText) }, 0 },
    { { (void *)&C_ModalDialog, ptoc(&C_ModalDialog) }, 0 },
    { { (void *)&C_DetachResource, ptoc(&C_DetachResource) }, 0 },
    { { (void *)&C_SetResPurge, ptoc(&C_SetResPurge) }, 0 },
    { { (void *)&C_CurResFile, ptoc(&C_CurResFile) }, 0 },
    { { (void *)&C_InitResources, ptoc(&C_InitResources) }, 0 },
    { { (void *)&C_RsrcZoneInit, ptoc(&C_RsrcZoneInit) }, 0 },
    { { (void *)&C_OpenResFile, ptoc(&C_OpenResFile) }, 0 },
    { { (void *)&C_UseResFile, ptoc(&C_UseResFile) }, 0 },
    { { (void *)&C_UpdateResFile, ptoc(&C_UpdateResFile) }, 0 },
    { { (void *)&C_CloseResFile, ptoc(&C_CloseResFile) }, 0 },
    { { (void *)&C_SetResLoad, ptoc(&C_SetResLoad) }, 0 },
    { { (void *)&C_CountResources, ptoc(&C_CountResources) }, 0 },
    { { (void *)&C_GetIndResource, ptoc(&C_GetIndResource) }, 0 },
    { { (void *)&C_CountTypes, ptoc(&C_CountTypes) }, 0 },
    { { (void *)&C_GetIndType, ptoc(&C_GetIndType) }, 0 },
    { { (void *)&__GetResource, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_GetNamedResource, ptoc(&C_GetNamedResource) }, 0 },
    { { (void *)&C_LoadResource, ptoc(&C_LoadResource) }, 0 },
    { { (void *)&C_ReleaseResource, ptoc(&C_ReleaseResource) }, 0 },
    { { (void *)&C_HomeResFile, ptoc(&C_HomeResFile) }, 0 },
    { { (void *)&C_SizeResource, ptoc(&C_SizeResource) }, 0 },
    { { (void *)&C_GetResAttrs, ptoc(&C_GetResAttrs) }, 0 },
    { { (void *)&C_SetResAttrs, ptoc(&C_SetResAttrs) }, 0 },
    { { (void *)&C_GetResInfo, ptoc(&C_GetResInfo) }, 0 },
    { { (void *)&C_SetResInfo, ptoc(&C_SetResInfo) }, 0 },
    { { (void *)&C_ChangedResource, ptoc(&C_ChangedResource) }, 0 },
    { { (void *)&C_AddResource, ptoc(&C_AddResource) }, 0 },
    unimplemented_toolstuff,
    { { (void *)&C_RmveResource, ptoc(&C_RmveResource) }, 0 },
    unimplemented_toolstuff,
    { { (void *)&C_ResError, ptoc(&C_ResError) }, 0 },
    { { (void *)&C_WriteResource, ptoc(&C_WriteResource) }, 0 },
    { { (void *)&C_CreateResFile, ptoc(&C_CreateResFile) }, 0 },
    { { (void *)&C_SystemEvent, ptoc(&C_SystemEvent) }, 0 },
    { { (void *)&C_SystemClick, ptoc(&C_SystemClick) }, 0 },
    { { (void *)&C_SystemTask, ptoc(&C_SystemTask) }, 0 },
    { { (void *)&C_SystemMenu, ptoc(&C_SystemMenu) }, 0 },
    { { (void *)&C_OpenDeskAcc, ptoc(&C_OpenDeskAcc) }, 0 },
    { { (void *)&C_CloseDeskAcc, ptoc(&C_CloseDeskAcc) }, 0 },
    { { (void *)&C_GetPattern, ptoc(&C_GetPattern) }, 0 },
    { { (void *)&C_GetCursor, ptoc(&C_GetCursor) }, 0 },
    { { (void *)&C_GetString, ptoc(&C_GetString) }, 0 },
    { { (void *)&C_GetIcon, ptoc(&C_GetIcon) }, 0 },
    { { (void *)&C_GetPicture, ptoc(&C_GetPicture) }, 0 },
    { { (void *)&C_GetNewWindow, ptoc(&C_GetNewWindow) }, 0 },
    { { (void *)&C_GetNewControl, ptoc(&C_GetNewControl) }, 0 },
    { { (void *)&C_GetMenu, ptoc(&C_GetMenu) }, 0 },
    { { (void *)&C_GetNewMBar, ptoc(&C_GetNewMBar) }, 0 },
    { { (void *)&C_UniqueID, ptoc(&C_UniqueID) }, 0 },
    { { (void *)&C_SystemEdit, ptoc(&C_SystemEdit) }, 0 },
    { { (void *)&C_KeyTrans, ptoc(&C_KeyTrans) }, 0 },
    { { (void *)&C_OpenRFPerm, ptoc(&C_OpenRFPerm) }, 0 },
    { { (void *)&C_RsrcMapEntry, ptoc(&C_RsrcMapEntry) }, 0 },
    { { (void *)&_Secs2Date, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_Date2Secs, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_SysBeep, ptoc(&C_SysBeep) }, 0 },
    { { (void *)&C_SysError, ptoc(&C_SysError) }, 0 },
    unimplemented_toolstuff,
    { { (void *)&C_TEGetText, ptoc(&C_TEGetText) }, 0 },
    { { (void *)&C_TEInit, ptoc(&C_TEInit) }, 0 },
    { { (void *)&C_TEDispose, ptoc(&C_TEDispose) }, 0 },
    { { (void *)&C_TextBox, ptoc(&C_TextBox) }, 0 },
    { { (void *)&C_TESetText, ptoc(&C_TESetText) }, 0 },
    { { (void *)&C_TECalText, ptoc(&C_TECalText) }, 0 },
    { { (void *)&C_TESetSelect, ptoc(&C_TESetSelect) }, 0 },
    { { (void *)&C_TENew, ptoc(&C_TENew) }, 0 },
    { { (void *)&C_TEUpdate, ptoc(&C_TEUpdate) }, 0 },
    { { (void *)&C_TEClick, ptoc(&C_TEClick) }, 0 },
    { { (void *)&C_TECopy, ptoc(&C_TECopy) }, 0 },
    { { (void *)&C_TECut, ptoc(&C_TECut) }, 0 },
    { { (void *)&C_TEDelete, ptoc(&C_TEDelete) }, 0 },
    { { (void *)&C_TEActivate, ptoc(&C_TEActivate) }, 0 },
    { { (void *)&C_TEDeactivate, ptoc(&C_TEDeactivate) }, 0 },
    { { (void *)&C_TEIdle, ptoc(&C_TEIdle) }, 0 },
    { { (void *)&C_TEPaste, ptoc(&C_TEPaste) }, 0 },
    { { (void *)&C_TEKey, ptoc(&C_TEKey) }, 0 },
    { { (void *)&C_TEScroll, ptoc(&C_TEScroll) }, 0 },
    { { (void *)&C_TEInsert, ptoc(&C_TEInsert) }, 0 },
    { { (void *)&C_TESetJust, ptoc(&C_TESetJust) }, 0 },
    { { (void *)&C_Munger, ptoc(&C_Munger) }, 0 },
    { { (void *)&_HandToHand, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_PtrToXHand, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_PtrToHand, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_HandAndHand, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_InitPack, ptoc(&C_InitPack) }, 0 },
    { { (void *)&C_InitAllPacks, ptoc(&C_InitAllPacks) }, 0 },
    { { (void *)&_Pack0, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_Pack1, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_Pack2, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_Pack3, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_Pack4, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_Pack5, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_Pack6, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_Pack7, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_PtrAndHand, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_LoadSeg, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_UnloadSeg, ptoc(&C_UnloadSeg) }, 0 },
    { { (void *)&_Launch, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_Chain, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_ExitToShell, ptoc(&C_ExitToShell) }, 0 },
    { { (void *)&C_GetAppParms, ptoc(&C_GetAppParms) }, 0 },
    { { (void *)&C_GetResFileAttrs, ptoc(&C_GetResFileAttrs) }, 0 },
    { { (void *)&C_SetResFileAttrs, ptoc(&C_SetResFileAttrs) }, 0 },
    unimplemented_toolstuff,
    { { (void *)&C_InfoScrap, ptoc(&C_InfoScrap) }, 0 },
    { { (void *)&C_UnloadScrap, ptoc(&C_UnloadScrap) }, 0 },
    { { (void *)&C_LoadScrap, ptoc(&C_LoadScrap) }, 0 },
    { { (void *)&C_ZeroScrap, ptoc(&C_ZeroScrap) }, 0 },
    { { (void *)&C_GetScrap, ptoc(&C_GetScrap) }, 0 },
    { { (void *)&C_PutScrap, ptoc(&C_PutScrap) }, 0 },
    { { (void *)&_Debugger, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_OpenCPort, ptoc(&C_OpenCPort) }, 0 },
    { { (void *)&C_InitCPort, ptoc(&C_InitCPort) }, 0 },
    { { (void *)&C_CloseCPort, ptoc(&C_CloseCPort) }, 0 },
    { { (void *)&C_NewPixMap, ptoc(&C_NewPixMap) }, 0 },
    { { (void *)&C_DisposPixMap, ptoc(&C_DisposPixMap) }, 0 },
    { { (void *)&C_CopyPixMap, ptoc(&C_CopyPixMap) }, 0 },
    { { (void *)&C_SetPortPix, ptoc(&C_SetPortPix) }, 0 },
    { { (void *)&C_NewPixPat, ptoc(&C_NewPixPat) }, 0 },
    { { (void *)&C_DisposPixPat, ptoc(&C_DisposPixPat) }, 0 },
    { { (void *)&C_CopyPixPat, ptoc(&C_CopyPixPat) }, 0 },
    { { (void *)&C_PenPixPat, ptoc(&C_PenPixPat) }, 0 },
    { { (void *)&C_BackPixPat, ptoc(&C_BackPixPat) }, 0 },
    { { (void *)&C_GetPixPat, ptoc(&C_GetPixPat) }, 0 },
    { { (void *)&C_MakeRGBPat, ptoc(&C_MakeRGBPat) }, 0 },
    { { (void *)&C_FillCRect, ptoc(&C_FillCRect) }, 0 },
    { { (void *)&C_FillCOval, ptoc(&C_FillCOval) }, 0 },
    { { (void *)&C_FillCRoundRect, ptoc(&C_FillCRoundRect) }, 0 },
    { { (void *)&C_FillCArc, ptoc(&C_FillCArc) }, 0 },
    { { (void *)&C_FillCRgn, ptoc(&C_FillCRgn) }, 0 },
    { { (void *)&C_FillCPoly, ptoc(&C_FillCPoly) }, 0 },
    { { (void *)&C_RGBForeColor, ptoc(&C_RGBForeColor) }, 0 },
    { { (void *)&C_RGBBackColor, ptoc(&C_RGBBackColor) }, 0 },
    { { (void *)&C_SetCPixel, ptoc(&C_SetCPixel) }, 0 },
    { { (void *)&C_GetCPixel, ptoc(&C_GetCPixel) }, 0 },
    { { (void *)&C_GetCTable, ptoc(&C_GetCTable) }, 0 },
    { { (void *)&C_GetForeColor, ptoc(&C_GetForeColor) }, 0 },
    { { (void *)&C_GetBackColor, ptoc(&C_GetBackColor) }, 0 },
    { { (void *)&C_GetCCursor, ptoc(&C_GetCCursor) }, 0 },
    { { (void *)&C_SetCCursor, ptoc(&C_SetCCursor) }, 0 },
    { { (void *)&C_AllocCursor, ptoc(&C_AllocCursor) }, 0 },
    { { (void *)&C_GetCIcon, ptoc(&C_GetCIcon) }, 0 },
    { { (void *)&C_PlotCIcon, ptoc(&C_PlotCIcon) }, 0 },
    { { (void *)&C_OpenCPicture, ptoc(&C_OpenCPicture) }, 0 },
    { { (void *)&C_OpColor, ptoc(&C_OpColor) }, 0 },
    { { (void *)&C_HiliteColor, ptoc(&C_HiliteColor) }, 0 },
    { { (void *)&C_CharExtra, ptoc(&C_CharExtra) }, 0 },
    { { (void *)&C_DisposCTable, ptoc(&C_DisposCTable) }, 0 },
    { { (void *)&C_DisposeCIcon, ptoc(&C_DisposeCIcon) }, 0 },
    { { (void *)&C_DisposCCursor, ptoc(&C_DisposCCursor) }, 0 },
    { { (void *)&C_GetMaxDevice, ptoc(&C_GetMaxDevice) }, 0 },
    { { (void *)&C_GetCTSeed, ptoc(&C_GetCTSeed) }, 0 },
    { { (void *)&C_GetDeviceList, ptoc(&C_GetDeviceList) }, 0 },
    { { (void *)&C_GetMainDevice, ptoc(&C_GetMainDevice) }, 0 },
    { { (void *)&C_GetNextDevice, ptoc(&C_GetNextDevice) }, 0 },
    { { (void *)&C_TestDeviceAttribute, ptoc(&C_TestDeviceAttribute) }, 0 },
    { { (void *)&C_SetDeviceAttribute, ptoc(&C_SetDeviceAttribute) }, 0 },
    { { (void *)&C_InitGDevice, ptoc(&C_InitGDevice) }, 0 },
    { { (void *)&C_NewGDevice, ptoc(&C_NewGDevice) }, 0 },
    { { (void *)&C_DisposeGDevice, ptoc(&C_DisposeGDevice) }, 0 },
    { { (void *)&C_SetGDevice, ptoc(&C_SetGDevice) }, 0 },
    { { (void *)&C_GetGDevice, ptoc(&C_GetGDevice) }, 0 },
    { { (void *)&C_Color2Index, ptoc(&C_Color2Index) }, 0 },
    { { (void *)&C_Index2Color, ptoc(&C_Index2Color) }, 0 },
    { { (void *)&C_InvertColor, ptoc(&C_InvertColor) }, 0 },
    { { (void *)&C_RealColor, ptoc(&C_RealColor) }, 0 },
    { { (void *)&C_GetSubTable, ptoc(&C_GetSubTable) }, 0 },
    unimplemented_toolstuff,
    { { (void *)&C_MakeITable, ptoc(&C_MakeITable) }, 0 },
    { { (void *)&C_AddSearch, ptoc(&C_AddSearch) }, 0 },
    { { (void *)&C_AddComp, ptoc(&C_AddComp) }, 0 },
    { { (void *)&C_SetClientID, ptoc(&C_SetClientID) }, 0 },
    { { (void *)&C_ProtectEntry, ptoc(&C_ProtectEntry) }, 0 },
    { { (void *)&C_ReserveEntry, ptoc(&C_ReserveEntry) }, 0 },
    { { (void *)&C_SetEntries, ptoc(&C_SetEntries) }, 0 },
    { { (void *)&C_QDError, ptoc(&C_QDError) }, 0 },
    { { (void *)&C_SetWinColor, ptoc(&C_SetWinColor) }, 0 },
    { { (void *)&C_GetAuxWin, ptoc(&C_GetAuxWin) }, 0 },
    { { (void *)&C_SetCtlColor, ptoc(&C_SetCtlColor) }, 0 },
    { { (void *)&C_GetAuxCtl, ptoc(&C_GetAuxCtl) }, 0 },
    { { (void *)&C_NewCWindow, ptoc(&C_NewCWindow) }, 0 },
    { { (void *)&C_GetNewCWindow, ptoc(&C_GetNewCWindow) }, 0 },
    { { (void *)&C_SetDeskCPat, ptoc(&C_SetDeskCPat) }, 0 },
    { { (void *)&C_GetCWMgrPort, ptoc(&C_GetCWMgrPort) }, 0 },
    { { (void *)&C_SaveEntries, ptoc(&C_SaveEntries) }, 0 },
    { { (void *)&C_RestoreEntries, ptoc(&C_RestoreEntries) }, 0 },
    { { (void *)&C_NewCDialog, ptoc(&C_NewCDialog) }, 0 },
    { { (void *)&C_DelSearch, ptoc(&C_DelSearch) }, 0 },
    { { (void *)&C_DelComp, ptoc(&C_DelComp) }, 0 },
    { { (void *)&C_SetStdCProcs, ptoc(&C_SetStdCProcs) }, 0 },
    { { (void *)&C_CalcCMask, ptoc(&C_CalcCMask) }, 0 },
    { { (void *)&C_SeedCFill, ptoc(&C_SeedCFill) }, 0 },
    { { (void *)&C_IMVI_CopyDeepMask, ptoc(&C_IMVI_CopyDeepMask) }, 0 },
    { { (void *)&_HighLevelFSDispatch, static_cast<ULONGINT>(-1) }, 0 }, /* AA52 */
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
#if(!defined(powerpc) && !defined(__ppc__)) || defined(CFM_PROBLEMS)
    unimplemented_toolstuff,
    unimplemented_toolstuff, /* AA5A */
#else
    { { (void *)&_MixedMode, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_CodeFragment, static_cast<ULONGINT>(-1) }, 0 }, /* AA5A */
#endif
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    { { (void *)&C_DelMCEntries, ptoc(&C_DelMCEntries) }, 0 },
    { { (void *)&C_GetMCInfo, ptoc(&C_GetMCInfo) }, 0 },
    { { (void *)&C_SetMCInfo, ptoc(&C_SetMCInfo) }, 0 },
    { { (void *)&C_DispMCInfo, ptoc(&C_DispMCInfo) }, 0 },
    { { (void *)&C_GetMCEntry, ptoc(&C_GetMCEntry) }, 0 },
    { { (void *)&C_SetMCEntries, ptoc(&C_SetMCEntries) }, 0 },
    { { (void *)&C_MenuChoice, ptoc(&C_MenuChoice) }, 0 },
    unimplemented_toolstuff,
    { { (void *)&_DialogDispatch, static_cast<ULONGINT>(-1) }, 0 },
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    { { (void *)&C_InitPalettes, ptoc(&C_InitPalettes) }, 0 },
    { { (void *)&C_NewPalette, ptoc(&C_NewPalette) }, 0 },
    { { (void *)&C_GetNewPalette, ptoc(&C_GetNewPalette) }, 0 },
    { { (void *)&C_DisposePalette, ptoc(&C_DisposePalette) }, 0 },
    { { (void *)&C_ActivatePalette, ptoc(&C_ActivatePalette) }, 0 },
    { { (void *)&C_NSetPalette, ptoc(&C_NSetPalette) }, 0 },
    { { (void *)&C_GetPalette, ptoc(&C_GetPalette) }, 0 },
    { { (void *)&C_PmForeColor, ptoc(&C_PmForeColor) }, 0 },
    { { (void *)&C_PmBackColor, ptoc(&C_PmBackColor) }, 0 },
    { { (void *)&C_AnimateEntry, ptoc(&C_AnimateEntry) }, 0 },
    { { (void *)&C_AnimatePalette, ptoc(&C_AnimatePalette) }, 0 },
    { { (void *)&C_GetEntryColor, ptoc(&C_GetEntryColor) }, 0 },
    { { (void *)&C_SetEntryColor, ptoc(&C_SetEntryColor) }, 0 },
    { { (void *)&C_GetEntryUsage, ptoc(&C_GetEntryUsage) }, 0 },
    { { (void *)&C_SetEntryUsage, ptoc(&C_SetEntryUsage) }, 0 },
    { { (void *)&C_CTab2Palette, ptoc(&C_CTab2Palette) }, 0 },
    { { (void *)&C_Palette2CTab, ptoc(&C_Palette2CTab) }, 0 },
    { { (void *)&C_CopyPalette, ptoc(&C_CopyPalette) }, 0 },
    { { (void *)&_PaletteDispatch, static_cast<ULONGINT>(-1) }, 0 },
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    { { (void *)&_QuickTime, static_cast<ULONGINT>(-1) }, 0 },
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
#if defined(powerpc) && !defined(__ppc__)
    { { (void *)&_modeswitch, static_cast<ULONGINT>(-1) }, 0 },
#else
    unimplemented_toolstuff,
#endif
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    { { (void *)&_WackyQD32Trap, static_cast<ULONGINT>(-1) }, 0 },
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    { { (void *)&_QDExtensions, static_cast<ULONGINT>(-1) }, 0 },
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    { { (void *)&_IconDispatch, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_DeviceLoop, ptoc(&C_DeviceLoop) }, 0 },
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    unimplemented_toolstuff,
    { { (void *)&C_DebugStr, ptoc(&C_DebugStr) }, 0 },
};

pstuff_t Executor::pstuff[] = {
    { { (void *)&C_ROMlib_mytrack, ptoc(&C_ROMlib_mytrack) }, 0 },
    { { (void *)&C_ROMlib_stdftrack, ptoc(&C_ROMlib_stdftrack) }, 0 },
    { { (void *)&C_ROMlib_myfilt, ptoc(&C_ROMlib_myfilt) }, 0 },
    { { (void *)&C_ROMlib_stdffilt, ptoc(&C_ROMlib_stdffilt) }, 0 },
    { { (void *)&C_ROMlib_numsonlyfilterproc,
        ptoc(&C_ROMlib_numsonlyfilterproc) },
      0 },
    { { (void *)&C_ROMlib_stlfilterproc, ptoc(&C_ROMlib_stlfilterproc) }, 0 },

    /* NOTE: the following four routines don't really use pascal calling
	 conventions, but we do need pstuff entries for them so we can
	 look for their addresses and short circuit calls to them.  The
	 zero is correct because they take no args and return no value */

    { { (void *)&C_ROMlib_wakeup, 0 }, 0 },
    { { (void *)&C_ROMlib_vcatch, 0 }, 0 },
    { { (void *)C_ROMlib_dotext, 0 }, 0 },
    { { (void *)&C_handle_refresh, 0 }, 0 },

    { { (void *)&C_ROMlib_mysound, ptoc(&C_ROMlib_mysound) }, 0 },
    { { (void *)&C_ROMlib_myjobproc, ptoc(&C_ROMlib_myjobproc) }, 0 },
    { { (void *)&C_ROMlib_mystlproc, ptoc(&C_ROMlib_mystlproc) }, 0 },

    { { (void *)C_cdef0, ptoc(&C_cdef0) }, 0 },
    { { (void *)&C_cdef16, ptoc(&C_cdef16) }, 0 },
    { { (void *)&C_ldef0, ptoc(&C_ldef0) }, 0 },
    { { (void *)&C_mdef0, ptoc(&C_mdef0) }, 0 },
    { { (void *)&C_mbdf0, ptoc(&C_mbdf0) }, 0 },
    { { (void *)C_wdef0, ptoc(&C_wdef0) }, 0 },
    { { (void *)&C_wdef16, ptoc(&C_wdef16) }, 0 },
    { { (void *)&C_snth5, ptoc(&C_snth5) }, 0 },

    { { (void *)&C_IUMagString, ptoc(&C_IUMagString) }, 0 },
    { { (void *)&C_PrStlInit, ptoc(&C_PrStlInit) }, 0 },
    { { (void *)C_PrJobInit, ptoc(&C_PrJobInit) }, 0 },

    { { (void *)C_StdText, ptoc(&C_StdText) }, 0 },
    { { (void *)C_StdLine, ptoc(&C_StdLine) }, 0 },
    { { (void *)C_StdRect, ptoc(&C_StdRect) }, 0 },
    { { (void *)&C_StdOval, ptoc(&C_StdOval) }, 0 },
    { { (void *)C_StdRRect, ptoc(&C_StdRRect) }, 0 },
    { { (void *)C_StdArc, ptoc(&C_StdArc) }, 0 },
    { { (void *)&C_StdRgn, ptoc(&C_StdRgn) }, 0 },
    { { (void *)&C_StdPoly, ptoc(&C_StdPoly) }, 0 },
    { { (void *)C_StdBits, ptoc(&C_StdBits) }, 0 },
    { { (void *)&C_StdComment, ptoc(&C_StdComment) }, 0 },
    { { (void *)C_StdTxMeas, ptoc(&C_StdTxMeas) }, 0 },
    { { (void *)C_StdPutPic, ptoc(&C_StdPutPic) }, 0 },

    { { (void *)&C_FMSwapFont, ptoc(&C_FMSwapFont) }, 0 },
    { { (void *)&C_InitCursor, ptoc(&C_InitCursor) }, 0 },

    { { (void *)&C_textasPS, ptoc(&C_textasPS) }, 0 },
    { { (void *)&C_PrText, ptoc(&C_PrText) }, 0 },
    { { (void *)&C_PrLine, ptoc(&C_PrLine) }, 0 },
    { { (void *)&C_PrRect, ptoc(&C_PrRect) }, 0 },
    { { (void *)&C_PrRRect, ptoc(&C_PrRRect) }, 0 },
    { { (void *)&C_PrOval, ptoc(&C_PrOval) }, 0 },
    { { (void *)&C_PrArc, ptoc(&C_PrArc) }, 0 },
    { { (void *)&C_PrPoly, ptoc(&C_PrPoly) }, 0 },
    { { (void *)&C_PrRgn, ptoc(&C_PrRgn) }, 0 },
    { { (void *)&C_PrBits, ptoc(&C_PrBits) }, 0 },
    { { (void *)&C_PrComment, ptoc(&C_PrComment) }, 0 },
    { { (void *)&C_PrTxMeas, ptoc(&C_PrTxMeas) }, 0 },
    { { (void *)&C_PrGetPic, ptoc(&C_PrGetPic) }, 0 },
    { { (void *)&C_PrPutPic, ptoc(&C_PrPutPic) }, 0 },
    { { (void *)&C_donotPrText, ptoc(&C_donotPrText) }, 0 },
    { { (void *)&C_donotPrLine, ptoc(&C_donotPrLine) }, 0 },
    { { (void *)&C_donotPrRect, ptoc(&C_donotPrRect) }, 0 },
    { { (void *)&C_donotPrRRect, ptoc(&C_donotPrRRect) }, 0 },
    { { (void *)&C_donotPrOval, ptoc(&C_donotPrOval) }, 0 },
    { { (void *)&C_donotPrArc, ptoc(&C_donotPrArc) }, 0 },
    { { (void *)&C_donotPrPoly, ptoc(&C_donotPrPoly) }, 0 },
    { { (void *)&C_donotPrRgn, ptoc(&C_donotPrRgn) }, 0 },
    { { (void *)&C_donotPrBits, ptoc(&C_donotPrBits) }, 0 },
    { { (void *)&C_donotPrGetPic, ptoc(&C_donotPrGetPic) }, 0 },
    { { (void *)&C_donotPrPutPic, ptoc(&C_donotPrPutPic) }, 0 },
    { { (void *)&C_ROMlib_filebox, ptoc(&C_ROMlib_filebox) }, 0 },
    { { (void *)&C_StdGetPic, ptoc(&C_StdGetPic) }, 0 },

    { { (void *)&_flushcache, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_Key1Trans, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&_Key2Trans, static_cast<ULONGINT>(-1) }, 0 },

    { { NULL /* was C_ROMlib_licensefilt */, 0 /* was ptoc(&C_ROMlib_licensefilt) */ }, 0 },
    { { (void *)&C_unixmount, ptoc(&C_unixmount) }, 0 },
    { { (void *)&C_GestaltTablesOnly, ptoc(&C_GestaltTablesOnly) }, 0 },
    { { (void *)&C_sound_timer_handler, 0 }, 0 },
    { { (void *)&C_adb_service_stub, 0 }, 0 },
    { { (void *)&C_cdef1008, ptoc(&C_cdef1008) }, 0 },
    { { (void *)&_bad_trap_unimplemented, static_cast<ULONGINT>(-1) }, 0 },
    { { (void *)&C_pack8_unknown_selector, ptoc(&C_pack8_unknown_selector) }, 0 },
    { { (void *)&C_PhysicalGestalt, ptoc(&C_PhysicalGestalt) }, 0 },

    { { (void *)&C_HideCursor, ptoc(&C_HideCursor) }, 0 },
    { { (void *)&C_ShowCursor, ptoc(&C_ShowCursor) }, 0 },
    { { (void *)&C_ShieldCursor, ptoc(&C_ShieldCursor) }, 0 },
    { { (void *)&C_SetCursor, ptoc(&C_SetCursor) }, 0 },
    { { (void *)&C_ObscureCursor, ptoc(&C_ObscureCursor) }, 0 },
    { { (void *)&C_unknown574, ptoc(&C_ShowCursor) }, 0 },

    { { (void *)&C_ROMlib_circle_ok, ptoc(&C_ROMlib_circle_ok) }, 0 },
    { { (void *)&C_ROMlib_orientation, ptoc(&C_ROMlib_orientation) }, 0 },

    { { (void *)&C_new_draw_scroll, ptoc(&C_new_draw_scroll) }, 0 },
    { { (void *)&C_new_pos_ctl, ptoc(&C_new_pos_ctl) }, 0 },
};

static void *fsroutines[][2] = {
    { /* 0xA000 */ (void *)PBOpen, (void *)PBHOpen /*  0 */ },
#define OPENTRAP 0
#define OPENINDEX 0

    { /* 0xA001 */ (void *)PBClose, (void *)PBClose /*  1 */ },
#define CLOSETRAP 1
#define CLOSEINDEX 1

    { /* 0xA002 */ (void *)PBRead, (void *)PBRead /*  2 */ },
#define READTRAP 2
#define READINDEX 2

    { /* 0xA003 */ (void *)PBWrite, (void *)PBWrite /*  3 */ },
#define WRITETRAP 3
#define WRITEINDEX 3

    { /* 0xA004 */ (void *)PBControl, (void *)PBControl /*  4 */ },
#define CONTROLTRAP 4
#define CONTROLINDEX 4

    { /* 0xA005 */ (void *)PBStatus, (void *)PBStatus /*  5 */ },
#define STATUSTRAP 5
#define STATUSINDEX 5

    { /* 0xA006 */ (void *)PBKillIO, (void *)PBKillIO /*  6 */ },
#define KILLIOTRAP 6
#define KILLIOINDEX 6

    { /* 0xA007 */ (void *)PBGetVInfo, (void *)PBHGetVInfo /*  7 */ },
#define GETVINFOTRAP 7
#define GETVINFOINDEX 7

    { /* 0xA008 */ (void *)PBCreate, (void *)PBHCreate /*  8 */ },
#define CREATETRAP 8
#define CREATEINDEX 8

    { /* 0xA009 */ (void *)PBDelete, (void *)PBHDelete /*  9 */ },
#define DELETETRAP 9
#define DELETEINDEX 9

    { /* 0xA00A */ (void *)PBOpenRF, (void *)PBHOpenRF /* 10 */ },
#define OPENRFTRAP 0xA
#define OPENRFINDEX 10

    { /* 0xA00B */ (void *)PBRename, (void *)PBHRename /* 11 */ },
#define RENAMETRAP 0xB
#define RENAMEINDEX 11

    { /* 0xA00C */ (void *)PBGetFInfo, (void *)PBHGetFInfo /* 12 */ },
#define GETFINFOTRAP 0xC
#define GETFINFOINDEX 12

    { /* 0xA00D */ (void *)PBSetFInfo, (void *)PBHSetFInfo /* 13 */ },
#define SETFINFOTRAP 0xD
#define SETFINFOINDEX 13

    { /* 0xA00E */ (void *)PBUnmountVol, (void *)PBUnmountVol /* 14 */ },
#define UNMOUNTVOLTRAP 0xE
#define UNMOUNTVOLINDEX 14

    { /* 0xA00F */ (void *)PBMountVol, (void *)PBMountVol /* 15 */ },
#define MOUNTVOLTRAP 0xF
#define MOUNTVOLINDEX 15

    { /* 0xA010 */ (void *)PBAllocate, (void *)PBAllocate /* 16 */ },
#define ALLOCATETRAP 0x10
#define ALLOCATEINDEX 16

    { /* 0xA011 */ (void *)PBGetEOF, (void *)PBGetEOF /* 17 */ },
#define GETEOFTRAP 0x11
#define GETEOFINDEX 17

    { /* 0xA012 */ (void *)PBSetEOF, (void *)PBSetEOF /* 18 */ },
#define SETEOFTRAP 0x12
#define SETEOFINDEX 18

    { /* 0xA013 */ (void *)PBFlushVol, (void *)PBFlushVol /* 19 */ },
#define FLUSHVOLTRAP 0x13
#define FLUSHVOLINDEX 19

    { /* 0xA014 */ (void *)PBGetVol, (void *)PBHGetVol /* 20 */ },
#define GETVOLTRAP 0x14
#define GETVOLINDEX 20

    { /* 0xA015 */ (void *)PBSetVol, (void *)PBHSetVol /* 21 */ },
#define SETVOLTRAP 0x15
#define SETVOLINDEX 21

    { /* 0xA017 */ (void *)PBEject, (void *)PBEject /* 22 */ },
#define EJECTTRAP 0x17
#define EJECTINDEX 22

    { /* 0xA018 */ (void *)PBGetFPos, (void *)PBGetFPos /* 23 */ },
#define GETFPOSTRAP 0x18
#define GETFPOSINDEX 23

    { /* 0xA035 */ (void *)PBOffLine, (void *)PBOffLine /* 24 */ },
#define OFFLINETRAP 0x35
#define OFFLINEINDEX 24

    { /* 0xA041 */ (void *)PBSetFLock, (void *)PBHSetFLock /* 25 */ },
#define SETFLOCKTRAP 0x41
#define SETFLOCKINDEX 25

    { /* 0xA042 */ (void *)PBRstFLock, (void *)PBHRstFLock /* 26 */ },
#define RSTFLOCKTRAP 0x42
#define RSTFLOCKINDEX 26

    { /* 0xA043 */ (void *)PBSetFVers, (void *)PBSetFVers /* 27 */ },
#define SETFVERSTRAP 0x43
#define SETFVERSINDEX 27

    { /* 0xA044 */ (void *)PBSetFPos, (void *)PBSetFPos /* 28 */ },
#define SETFPOSTRAP 0x44
#define SETFPOSINDEX 28

    { /* 0xA045 */ (void *)PBFlushFile, (void *)PBFlushFile /* 29 */ },
#define FLUSHFILETRAP 0x45
#define FLUSHFILEINDEX 29

};

osstuff_t Executor::osstuff[0x100] = {
    { 0, (void *)PBOpen },
    { 0, (void *)PBClose },
    { 0, (void *)PBRead },
    { 0, (void *)PBWrite },
    { 0, (void *)PBControl },
    { 0, (void *)PBStatus },
    { 0, (void *)PBKillIO },
    { 0, (void *)PBGetVInfo },
    { 0, (void *)PBCreate },
    { 0, (void *)PBDelete },
    { 0, (void *)PBOpenRF },
    { 0, (void *)PBRename },
    { 0, (void *)PBGetFInfo },
    { 0, (void *)PBSetFInfo },
    { 0, (void *)PBUnmountVol },
    { 0, (void *)PBMountVol },
    { 0, (void *)PBAllocate },
    { 0, (void *)PBGetEOF },
    { 0, (void *)PBSetEOF },
    { 0, (void *)PBFlushVol },
    { 0, (void *)PBGetVol },
    { 0, (void *)PBSetVol },
    { 0, (void *)_FInitQueue },
    { 0, (void *)PBEject },
    { 0, (void *)PBGetFPos },
    { 0, (void *)_InitZone },
    { 0, (void *)_GetZone },
    { 0, (void *)_SetZone },
    { 0, (void *)_FreeMem },
    { 0, (void *)_MaxMem },
    { 0, (void *)_NewPtr },
    { 0, (void *)_DisposPtr },
    { 0, (void *)_SetPtrSize },
    { 0, (void *)_GetPtrSize },
    { 0, (void *)_NewHandle },
    { 0, (void *)_DisposHandle },
    { 0, (void *)_SetHandleSize },
    { 0, (void *)_GetHandleSize },
    { 0, (void *)_HandleZone },
    { 0, (void *)_ReallocHandle },
    { 0, (void *)_RecoverHandle },
    { 0, (void *)_HLock },
    { 0, (void *)_HUnlock },
    { 0, (void *)_EmptyHandle },
    { 0, (void *)_InitApplZone },
    { 0, (void *)_SetApplLimit },
    { 0, (void *)_BlockMove },
    { 0, (void *)_PostEvent },
    { 0, (void *)_OSEventAvail },
    { 0, (void *)_GetOSEvent },
    { 0, (void *)_FlushEvents },
    { 0, (void *)_VInstall },
    { 0, (void *)_VRemove },
    { 0, (void *)PBOffLine },
    { 0, (void *)_MoreMasters },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_WriteParam },
    { 0, (void *)_ReadDateTime },
    { 0, (void *)_SetDateTime },
    { 0, (void *)_Delay },
    { 0, (void *)_EqualString },
    { 0, (void *)_DrvrInstall },
    { 0, (void *)_DrvrRemove },
    { 0, (void *)_InitUtil },
    { 0, (void *)_ResrvMem },
    { 0, (void *)PBSetFLock },
    { 0, (void *)PBRstFLock },
    { 0, (void *)PBSetFVers },
    { 0, (void *)PBSetFPos },
    { 0, (void *)PBFlushFile },
    { 0, (void *)_GetTrapAddress },
    { 0, (void *)_SetTrapAddress },
    { 0, (void *)_PtrZone },
    { 0, (void *)_HPurge },
    { 0, (void *)_HNoPurge },
    { 0, (void *)_SetGrowZone },
    { 0, (void *)_CompactMem },
    { 0, (void *)_PurgeMem },
    { 0, (void *)_AddDrive },
    { 0, (void *)_RDrvrInstall },
    { 0, (void *)_RelString },
    { 0, (void *)_IMVI_ReadXPRam },
    { 0, (void *)_IMVI_WriteXPRam },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_UprString },
    { 0, (void *)_StripAddress },
    { 0, (void *)_IMVI_LowerText },
    { 0, (void *)_SetApplBase },
    { 0, (void *)_InsTime },
    { 0, (void *)_RmvTime },
    { 0, (void *)_PrimeTime },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_IMVI_MemoryDispatch },
    { 0, (void *)_SwapMMUMode },
    { 0, (void *)_NMInstall },
    { 0, (void *)_NMRemove },
    { 0, (void *)_HFSDispatch },
    { 0, (void *)_MaxBlock },
    { 0, (void *)_PurgeSpace },
    { 0, (void *)_MaxApplZone },
    { 0, (void *)_MoveHHi },
    { 0, (void *)_StackSpace },
    { 0, (void *)_NewEmptyHandle },
    { 0, (void *)_HSetRBit },
    { 0, (void *)_HClrRBit },
    { 0, (void *)_HGetState },
    { 0, (void *)_HSetState },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_SlotManager },
    { 0, (void *)_SlotVInstall },
    { 0, (void *)_SlotVRemove },
    { 0, (void *)_AttachVBL },
    { 0, (void *)_DoVBLTask },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_DTInstall },
    { 0, (void *)_SIntRemove },
    { 0, (void *)_CountADBs },
    { 0, (void *)_GetIndADB },
    { 0, (void *)_GetADBInfo },
    { 0, (void *)_SetADBInfo },
    { 0, (void *)_ADBReInit },
    { 0, (void *)_ADBOp },
    { 0, (void *)_GetDefaultStartup },
    { 0, (void *)_SetDefaultStartup },
    { 0, (void *)_InternalWait },
    { 0, (void *)_GetVideoDefault },
    { 0, (void *)_SetVideoDefault },
    { 0, (void *)_SIntInstall },
    { 0, (void *)_SetOSDefault },
    { 0, (void *)_GetOSDefault },
    { 0, (void *)_IMVI_IdleUpdate },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_IMVI_SlpQInstall },
    { 0, (void *)_CommToolboxDispatch },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_IMVI_DebugUtil },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_IMVI_DeferUserFn },
    { 0, (void *)_SysEnvirons },
    { 0, (void *)_IMVI_Translate24To32 },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Microseconds },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_HWPriv },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Gestalt },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_flushcache },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_IMVI_PPC },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_ResourceStub },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
    { 0, (void *)_Unimplemented },
};

void Executor::filltables(void)
{
    int i, fsindex;
    syn68k_addr_t unimpl = 0;

    unimpl = callback_install((callback_handler_t)(void *)_Unimplemented,
                              nullptr);

    for(i = 0; i < (int)NELEM(tooltraptable); ++i)
        tooltraptable[i] = toolstuff[i].orig = (toolstuff[i].ptoc.wheretogo == (void *)_Unimplemented) ? unimpl
                                                                                                       : callback_install((callback_handler_t)(toolstuff[i].ptoc.magic != (ULONGINT)-1 ? (void *)PascalToCCall
                                                                                                                                                                                       : toolstuff[i].ptoc.wheretogo),
                                                                                                                          &toolstuff[i].ptoc);

    for(i = 0; i < (int)NELEM(pstuff); ++i)
        pstuff[i].orig = (pstuff[i].ptoc.wheretogo == (void *)_Unimplemented)
            ? SYN68K_TO_US(unimpl)
            : SYN68K_TO_US(callback_install((callback_handler_t)((pstuff[i].ptoc.magic
                                                                  != (ULONGINT)-1)
                                                                     ? (void *)PascalToCCall
                                                                     : pstuff[i].ptoc.wheretogo),
                                            &pstuff[i].ptoc));

    for(i = 0; i < (int)NELEM(ostraptable); ++i)
    {
        switch(i)
        {
            case OPENTRAP:
                fsindex = OPENINDEX;
                break;
            case CLOSETRAP:
                fsindex = CLOSEINDEX;
                break;
            case READTRAP:
                fsindex = READINDEX;
                break;
            case WRITETRAP:
                fsindex = WRITEINDEX;
                break;
            case CONTROLTRAP:
                fsindex = CONTROLINDEX;
                break;
            case STATUSTRAP:
                fsindex = STATUSINDEX;
                break;
            case KILLIOTRAP:
                fsindex = KILLIOINDEX;
                break;
            case GETVINFOTRAP:
                fsindex = GETVINFOINDEX;
                break;
            case CREATETRAP:
                fsindex = CREATEINDEX;
                break;
            case DELETETRAP:
                fsindex = DELETEINDEX;
                break;
            case OPENRFTRAP:
                fsindex = OPENRFINDEX;
                break;
            case RENAMETRAP:
                fsindex = RENAMEINDEX;
                break;
            case GETFINFOTRAP:
                fsindex = GETFINFOINDEX;
                break;
            case SETFINFOTRAP:
                fsindex = SETFINFOINDEX;
                break;
            case UNMOUNTVOLTRAP:
                fsindex = UNMOUNTVOLINDEX;
                break;
            case MOUNTVOLTRAP:
                fsindex = MOUNTVOLINDEX;
                break;
            case ALLOCATETRAP:
                fsindex = ALLOCATEINDEX;
                break;
            case GETEOFTRAP:
                fsindex = GETEOFINDEX;
                break;
            case SETEOFTRAP:
                fsindex = SETEOFINDEX;
                break;
            case FLUSHVOLTRAP:
                fsindex = FLUSHVOLINDEX;
                break;
            case GETVOLTRAP:
                fsindex = GETVOLINDEX;
                break;
            case SETVOLTRAP:
                fsindex = SETVOLINDEX;
                break;
            case EJECTTRAP:
                fsindex = EJECTINDEX;
                break;
            case GETFPOSTRAP:
                fsindex = GETFPOSINDEX;
                break;
            case OFFLINETRAP:
                fsindex = OFFLINEINDEX;
                break;
            case SETFLOCKTRAP:
                fsindex = SETFLOCKINDEX;
                break;
            case RSTFLOCKTRAP:
                fsindex = RSTFLOCKINDEX;
                break;
            case SETFVERSTRAP:
                fsindex = SETFVERSINDEX;
                break;
            case SETFPOSTRAP:
                fsindex = SETFPOSINDEX;
                break;
            case FLUSHFILETRAP:
                fsindex = FLUSHFILEINDEX;
                break;
            default:
                fsindex = static_cast<ULONGINT>(-1);
                break;
        };

        if(fsindex == static_cast<ULONGINT>(-1))
            ostraptable[i] = osstuff[i].orig = (osstuff[i].func == (void *)_Unimplemented) ? unimpl
                                                                                           : callback_install((callback_handler_t)osstuff[i].func,
                                                                                                              osstuff[i].func);
        else
        {
            osstuff[i].func = (void *)_HFSRoutines;
            ostraptable[i] = osstuff[i].orig = callback_install((callback_handler_t)_HFSRoutines,
                                                                fsroutines[fsindex]);
        }
    }
}
